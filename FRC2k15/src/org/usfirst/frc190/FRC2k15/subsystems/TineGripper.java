// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc190.FRC2k15.subsystems;

import org.usfirst.frc190.FRC2k15.RobotMap;
import org.usfirst.frc190.FRC2k15.Components.LimitedPIDSubsystem;

import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class TineGripper extends PIDSubsystem implements LimitedPIDSubsystem{
	// TODO: Update these
	public final double containerPosition = 0.0;
	public final double narrowTotePosition = 0.0;
	public final double wideTotePosition = 0.0;
	public final double openPosition = 7.2;
	public final double fullyClosedPosition = 57.6;
	public final double almostClosedPosition = 53.3;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController gripper = RobotMap.tineGrippergripper;
    AnalogPotentiometer gripperPot = RobotMap.tineGrippergripperPot;
    DigitalInput open = RobotMap.tineGripperopen;
    DigitalInput closed = RobotMap.tineGripperclosed;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Initialize your subsystem here
	public TineGripper() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("TineGripper", 0.3, 0.0, 0.0);
        setAbsoluteTolerance(1.5);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("TineGripper", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	}

	protected double returnPIDInput() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return gripperPot.get();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	}

	protected void usePIDOutput(double output) {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        gripper.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	}

	public double getPotValue(){
		return gripperPot.get();
	}
	/**
	 * @param speed
	 *            Speed to set the motor
	 */
	@Override
	public void setSpeed(double speed) {
		disable();
		gripper.set(speed);
	}

	public boolean getOpen() {
//		return open.get();
		return false;
	}

	public boolean getClosed() {
//		return closed.get();
		return false;
	}

	@Override
	public boolean atmax() {
//		return open.get();
		return false;
	}

	@Override
	public boolean atmin() {
//		return closed.get();
		return false;
	}

	@Override
	public void setPosition(double setpoint) {
		setSetpoint(setpoint);
		enable();
	}

	@Override
	public boolean atPosition() {
		return onTarget();
	}

	@Override
	public PIDSubsystem getSubSystem() {
		return this;
	}

}
