// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc190.FRC2k15.subsystems;

import org.usfirst.frc190.FRC2k15.RobotMap;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 *
 */
public class Chainsaw extends PIDSubsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController chainsaw = RobotMap.chainsawchainsaw;
    DigitalInput hookDetector = RobotMap.chainsawhookDetector;
    Encoder chainsawEncoder = RobotMap.chainsawchainsawEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public double hookSetPoint[] = { 0.0, 0.1, 0.3, 0.5, 0.6, 0.7, 1.0 };// keeps
																			// track
																			// of
																			// PID
																			// setpoints
																			// for
																			// different
																			// hooklevels
	private byte currentHookPosition = 0;
	private byte maxHookPosition = (byte) (hookSetPoint.length - 1);
	public final double deliveryOffset = -1.0;		//This is the offset for the chainsaw that it lowers by to deliver a stack to the step

	// Initialize your subsystem here
	public Chainsaw() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Chainsaw", 1.0, 0.0, 0.0);
        setAbsoluteTolerance(0.2);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("Chainsaw", "PIDSubsystem Controller", getPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

		// Use these to get going:
		// setSetpoint() - Sets where the PID controller should move the system
		// to
		// enable() - Enables the PID controller.
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	protected double returnPIDInput() {
		// Return your input value for the PID loop
		// e.g. a sensor, like a potentiometer:
		// yourPot.getAverageVoltage() / kYourMaxVoltage;

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return chainsawEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
	}

	protected void usePIDOutput(double output) {
		// Use output to drive your system, like a motor
		// e.g. yourMotor.set(output);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        chainsaw.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
	}

	public byte getHookPosition() {// gets the current hook position
		return currentHookPosition;
	}

	public void setHookPosition(byte pos) {// sets the current hook position
		currentHookPosition = setPos(pos);
		applySetpoint();
	}

	public void incrementHookPosition() {// increases current hook position by 1
		currentHookPosition = setPos((byte) (currentHookPosition + 1));
		applySetpoint();
	}

	public void decrementHookPosition() { // decreases current hook position by 1
		currentHookPosition = setPos((byte) (currentHookPosition - 1));
		applySetpoint();
	}

	public double getHookSetPoint() {
		return hookSetPoint[currentHookPosition];
	}

	private byte setPos(byte temppos) {// keeps currentHookPosition within the
										// bounds of array
		if (temppos < 0)
			return 0;// minimum value is 0
		if (temppos > maxHookPosition)
			return maxHookPosition; // prevents from going above max value
		else
			return temppos;// otherwise is set value
	}
	private void applySetpoint(){
		setSetpoint(hookSetPoint[currentHookPosition]);
		enable();
	}

	public void setSpeed(double speed) {// sets the motor to move at speed
		chainsaw.set(speed);
	}

	public boolean atZero() {// returns the state of hook detector
		return hookDetector.get();
	}

	public void resetEncoder() {// resets the encoder
		chainsawEncoder.reset();
	}
}
