// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc190.FRC2k15.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc190.FRC2k15.Robot;

/**
 *
 */
public class TurnAngle extends Command {
	private double goalAngle;
	private final double rSpeed = 0.2;
	private double turnAmount;
	private final double tolerance = 0.5;// maximum degrees off target to be
											// considered fine

	public TurnAngle(double angle) {// give a speed to turn at and an angle to
									// turn to ie 90 degrees
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);
		turnAmount = angle;
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drivetrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
		goalAngle = turnAmount + Robot.drivetrain.getHeading();// sets goal
																// angle to be
																// relative to
																// current
																// rotation
																// angle
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		SmartDashboard.putNumber("Gyro Angle", Robot.drivetrain.getHeading());
		Robot.drivetrain.MecanumDrivePolar(0, 0, rotateSpeed());// turn at the
																// rotatespeed *
																// direction
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		boolean done = Math.abs(goalAngle - Robot.drivetrain.getHeading()) < tolerance;// when
																						// within
																						// tolerance
																						// degrees
																						// of
																						// correct
																						// angle
																						// done
		return done;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.MecanumDrive(0, 0, 0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}

	private double rotateSpeed() { // calculates the rotation direction based on
									// difference between goal and current angle
		return Math.signum(goalAngle - Robot.drivetrain.getHeading()) * rSpeed;
	}
}
